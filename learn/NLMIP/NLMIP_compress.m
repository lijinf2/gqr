function [B,elapse] = NLMIP_compress(A, model)
%   This is a wrapper function of LMIP (Locality Sensitive Hashing)  testing.
%
%	Usage:
%	[B,elapse] = LMIP_compress(A, model)
%
%	      A: Rows of vectors of data points. Each row is sample point
%     model: The model generated by LSH_learn.
%
%	      B: The binary code of the input data A. Each row is sample point
%    elapse: The coding time (testing time).
%
%
%   version 1.0 --Feb/2018 
%
%   Written by  Xinyan Dai (xinyan.dai@outlook.com)
%                                             


tmp_T = tic;
[Nitems, Nfeatures] = size(A);
lengthBits = model.lengthBits;

prct = model.prct;

norms = sum(A.^2, 2);

lens = zeros(Nitems, lengthBits);

for k=1:Nitems
	% vector whose norms is not greater than prct[2] belongs to the 0 group
	currentLength = find(prct>norms(k), 1) - 2; 
    if isempty(currentLength)
        currentLength = size(prct, 2) - 2;
    end
	if(currentLength<0)
		currentLength = 0;
	end
	currentLength = currentLength + model.maxbits - model.normInteval;

	mask = 1;
	for bitIndex=1:lengthBits
		lens(k, lengthBits+1-bitIndex) = bitand(currentLength, mask)>0;
		mask = 2 * mask;
    end
end

normTerm = zeros(Nitems, 1);
Normalized_A = [A normTerm];
Ym = Normalized_A * model.U;

B = (Ym > 0);
% lens = lens - lens;
B = [B lens];

elapse = toc(tmp_T);
end
